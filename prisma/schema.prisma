generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://mattey:jTqSHSE8TUGkhXEpcH@stasis-wp.ru:5432/stasiswp"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Text
  type              String  @db.Text
  provider          String  @db.Text
  providerAccountId String  @db.Text
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Text
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  gameID        String    @unique @db.Text
  images        Image[]
  username      String?   @default("")
  approved      Boolean   @default(false)
  password      String    @default("default_Ann_password_value") @db.Char(60)
  email         String?   @unique
  emailVerified DateTime?
  tgref         String?   @default("")
  role          String?   @default("user")
  rank          String?   @default("R1")
  army          String?
  nation        String?
  created_at    DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  alerts        Alert[]

  authenticators       Authenticator[]
}

model VerificationToken {
  identifier String   @db.Text
  token      String   @unique @db.Text
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  filename  String
  filepath  String
  createdAt DateTime @default(now())
}

model Wikicategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}

model Wiki {
  autor     String?
  pageId    String   @id @unique @default(cuid())
  title     String?
  scr       String   @default("placeholder.png")
  alt       String?  @default("Prewiew image")
  category  String?
  short     String?
  md        String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlayerSnapshot {
  id         String   @id @default(cuid())
  warpathId  Int
  username   String   @default("NoNick")
  playerId   String?
  c4Id       String
  power      Int
  kill       Int
  die        Int
  kd         Float
  snapshotAt DateTime @default(now())

  player Player? @relation(fields: [playerId], references: [id])
  c4     C4      @relation(fields: [c4Id], references: [id])
}

model C4 {
  id           String    @id @default(cuid())
  map          String
  status       String    @default("active")
  startedAt    DateTime?
  endedAt      DateTime?
  createdAt    DateTime  @default(now())
  
  // Агрегированные показатели
  avgPowerGain Float?
  avgKillGain  Float?
  avgDieGain   Float?
  avgKdGain    Float?
  totalPlayers Int?
  
  statistics   C4Statistic[] 
  snapshots    PlayerSnapshot[] // Обратная связь
  
  @@index([startedAt])
}

model C4Statistic {
  id          String   @id @default(cuid())
  c4Id        String
  playerId    String?
  warpathId   Int
  username    String  @default("NoNick")
  
  startPower  Int
  startKill   Int
  startDie    Int
  startKd     Float
  
  powerGain   Int?
  killGain    Int?
  dieGain     Int?
  kdGain      Float?
  
  c4          C4       @relation(fields: [c4Id], references: [id])
  player      Player?   @relation(fields: [playerId], references: [id])
}

model Player {
  id        String    @id @default(cuid())
  warpathId Int?      @unique
  username  String
  ally      String?
  power     Int
  kill      Int
  die       Int
  kd        Float
  onSite    Boolean   @default(false)

  snapshots PlayerSnapshot[]
  c4Stats   C4Statistic[] // Обратная связь
}
model Alert {
  id        Int      @id @default(autoincrement())
  userId    String
  type      String   @default("info")
  message   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Promocode {
  id        Int       @id @default(autoincrement())
  code      String
  createdAt DateTime  @default(now())
  until     DateTime?
}

model Guild {
  id        Int      @id @default(1)
  power     BigInt
  leader    String
  updatedAt DateTime
}


// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
