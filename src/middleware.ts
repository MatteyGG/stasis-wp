// src/middleware.ts (–∏–ª–∏ middleware.ts –≤ –∫–æ—Ä–Ω–µ)
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { parse } from 'cookie'
import { prisma } from './lib/prisma'

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname
  console.log(`‚û°Ô∏è Middleware –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø—É—Ç–∏: ${pathname}`)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å /api/user/
  if (pathname.startsWith('/api/user/')) {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è API route...')

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º session token –∏–∑ cookies
      const cookieHeader = request.headers.get('cookie') || ''
      console.log('üç™ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ cookies:', cookieHeader)
      
      const cookies = parse(cookieHeader)
      const sessionToken = cookies['next-auth.session-token'] || cookies['__Secure-next-auth.session-token']
      console.log('üîë –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π session token:', sessionToken)

      if (!sessionToken) {
        console.log('‚ùå Session token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies')
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const session = await prisma.session.findUnique({
        where: { sessionToken },
        include: { user: true }
      })

      if (!session) {
        console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
      }

      if (new Date(session.expires) < new Date()) {
        console.log('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
      }

      console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${session.userId}`)

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      const requestHeaders = new Headers(request.headers)
      requestHeaders.set('x-user-id', session.userId)

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      console.log('‚û°Ô∏è –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º x-user-id')
      return NextResponse.next({
        request: {
          headers: requestHeaders,
        },
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ middleware:', error)
      return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
    }
  }

  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  console.log('‚û°Ô∏è –ü—É—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...')
  return NextResponse.next()
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ middleware –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
export const config = {
  matcher: '/api/user/:path*', // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –ø—É—Ç–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /api/user/
}